Linux命令之正则表达式

正则表达式描述了一种字符串匹配的模式，可以用来检查一个串是否含有某种子串、将匹配的字串替换或者从某个串中取出符合某个条件的字串等。

元字符
\:  将下一个字符标记为一个特殊字符、或一个原义字符、或一个向后引用、或一个八进制转义符。
^:  匹配输入字符串的开始位置。
$:  匹配输入字符串的结束位置。
*:  匹配前面的子表达式零次或多次。等价于{0,}。
+:  匹配前面的子表达式一次或多次。等价于{1,}。
?:  匹配前面的子表达式零次或一次。等价于{0,1}。
{n}: n是一个非负整数。匹配确定的n次。 
{n,}:n是一个非负整数。至少匹配n次。
{n,m}：m和n均为非负整数，其中n<=m。最少匹配n次最多匹配m次。
?:  当前字符紧跟在任何一个其他限制符(*,+,?,{n},{n,},{n,m})后面时，匹配模式使非贪婪的。非贪婪模式尽可能使少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。
.:  匹配除换行符(\n,\r)之外的任何单个字符。
(pattern):  匹配pattern并获取这一匹配。
(?:pattern): 匹配pattern但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。
x|y: 匹配x或y。
[xyz]:  字符集合。匹配所包含的任意一个字符。
[^xyz]: 负值字符集合。匹配未包含的任意字符。
[a-z]:  字符范围。匹配指定范围内的任意字符。
[^a-z]: 负值字符范围。匹配任何不在指定范围内的任意字符。
\b:  匹配一个单词的边界，也就是指单词和空格的位置。
\B:  匹配非单词边界。
\cx: 匹配由x指明的控制字符。
\d:  匹配一个数字字符。等价于[0-9]。
\D:  匹配一个非数字字符。等价于[^0-9]。
\f:  匹配一个换页符。
\n:  匹配一个换行符。
\r:  匹配一个回车符。
\s:  匹配任何空白字符，包括空格、制表符、换页符等等。等价于[\f\n\r\t\v]。
\S:  匹配任何非空白字符。等价于[^\f\n\r\t\v]。
\t:  匹配一个制表符。
\v:  匹配一个垂直制表符。
\w:  匹配字母、数字、下划线。等价于[a-zA-Z0-9_]。
\W:  匹配非字母、数字、下划线。等价于[^a-zA-Z0-9_]。
\xn: 

非打印字符
\cx：匹配由x指明的控制字符。例如,\cM匹配一个control-M或回车符。x的值必须为A-Z或a-z之一。否则，将c视为一个原义的'c'字符。
\f: 匹配一个换页符。等价于\x0c和\cL。
\n: 匹配一个换行符。等价于\x0a和\cJ。
\r: 匹配一个回车符。等价于\x0d和\cM。
\s: 匹配任何空白字符，包括空格、制表符、换页符等等。等价于[\f\n\r\t\v]。
\S: 匹配任何非空白字符。等价于[^\f\n\r\t\v]。
\t: 匹配一个制表符。等价于\x09和\cl。
\v: 匹配一个垂直制表符。等价于\x0b和\cK。

回车和换行的区别：
回车\r本义式光标重新回到本行开头。
换行\n本义式光标的下一行(不一定到下一行行首)。

特殊字符
若要匹配这些特殊字符，必须首先使字符"转义"，即，将反斜杠字符\放在它们前面。
$: 匹配输入字符串的结束位置。
()：标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。
*： 匹配前面的子表达式零次或多次。
+： 匹配前面的子表达式一次或多次。
.:  匹配除换行符\n之外的任何字符。
[:  标记一个中括号表达式的开始。
?:  匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。
\:  将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。
^:  匹配输入字符串的开始位置，除非在方括号表达式中使用，此时它表示不接受该字符集合。
{:  标记限定符表达式的开始。
|:  指明两项之间的一个选择。

贪婪限定符：*，+都是贪婪的，因为它们会尽可能多的匹配文字，只有在它们的后面加上一个？就可以实现非贪婪或最小匹配。

限定符
限定符用来指定正则表达式的一个给定组件必须要出现多少次才能满足匹配。有*，+，？，{n},{n,},{n,m}共6种。
*：匹配前面的子表达式零次或多次。*等价于{0,}。
+：匹配前面的子表达式一次或多次。+等价于{1,}。
?: 匹配前面的子表达式零次或一次。?等价于{0,1}。
{n}:n是一个非负整数。匹配确定的n次。
{n,}:n是一个非负整数。至少匹配n次。
{n,m}：m和n均为非负整数，其中n<=m。最少匹配n次最多匹配m次。

定位符
定位符使你能够将正则表达使固定到行首或行尾。
^:  匹配输入字符串开始的位置。
$:  匹配输入字符串结尾的位置。
\b: 匹配一个单词边界，即字与空格间的位置。
\B: 非单词边界匹配。

运算符优先级
正则表达式从左到右进行计算，并遵循优先级顺序，这与算术表达式非常类似。
相同优先级的从左到右进行运算，不同优先级的运算先高后低。
\                              转义符
(),(?:),(?=),[]                圆括号和方括号
*,+,?,{n},{n,},{n,m}           限定符
^,$,\任何元字符、任何字符      定位点和序列
|                              替换，“或”操作
